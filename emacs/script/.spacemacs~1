;; -*- mode: emacs-lisp; lexical-binding: t -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs) dotspacemacs-distribution 'spacemacs
   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation
   'unused
   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation
   t
   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path
   '()
   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   '((org :variables
          ;; org-enable-github-support t
          ;; org-enable-reveal-js-support t org-enable-hugo-support
          t
          ;; org-projectile-file "TODOs.org"
          org-enable-bootstrap-support
          t
          org-agenda-span
          'day
          org-agenda-start-with-log-mode
          t
          ;;番茄时钟
          org-pomodoro-length
          45
          org-pomodoro-short-break-length
          5
          spaceline-org-clock-p
          t
          :disabled-for '(semantic))
     ;; Typing-related
     (auto-completion :variables auto-completion-enable-sort-by-usage
                      t auto-completion-enable-snippets-in-popup
                      t auto-completion-enable-help-tooltip 'manual
                      auto-completion-tab-key-behavior 'cycle :disabled-for org
                      markdown)
     (spell-checking :variables spell-checking-enable-by-default
                     nil)
     (syntax-checking :variables syntax-checking-enable-by-default
                      nil syntax-checking-enable-tooltips nil)
     ;; Language support
     windows-scripts
     (python :variables python-backend'lsp
             ;; python-pipenv-activate t python-lsp-server
             'mspyls python-lsp-git-root "~/soft/server/python-language-server"
             ;; python-test-runner 'pytest
             ;; python-formatter 'yapf
             ;; python/init-importmagic nil
             python-indent-guess-indent-offset-verbose
             nil)
     (php :variables php-backend'lsp lsp-ui-doc-enable
          nil)
     yaml
     go
     (rust :variables rust-backend'racer)
     (vue :variables vue-backend'lsp node-add-modules-path
          t)
     (node :variables node-add-modules-path
           t)
     emacs-lisp
     (markdown :variables markdown-live-preview-engine'vmd)
     (lsp :variables lsp-enable-file-watchers
          nil
          ;; lsp-file-watch-threshold 3500
          ;; lsp-file-watch-ignored "/usr/include/"
          )
     (c-c++ :variables c-c++-backend'lsp-ccls c++-enable-organize-includes-on-save
            t c-c++-enable-clang-format-on-save t c-c++-adopt-subprojects
            t)
     java
     (html :variables web-fmt-tool'prettier web-mode-attr-indent-offset
           nil web-mode-markup-indent-offset 2 web-mode-css-indent-offset
           2 web-mode-code-indent-offset 2 web-mode-style-padding
           2 web-mode-script-padding 2 indent-tabs-mode
           nil tab-width 2 css-indent-offset 2 html-enable-lsp
           t css-enable-lsp t less-enable-lsp t scss-enable-lsp
           t)
     (sql :variables sql-capitalize-keywords
          t sql-backend 'lsp
          ;; sql-lsp-sqls-workspace-config-path 'workspace
          sql-lsp-sqls-workspace-config-path 'root)
     ;; chrome
     (javascript :variables
                 ;; javascript-backend 'tern javascript-backend'lsp
                 node-add-modules-path t javascript-fmt-tool
                 'prettier javascript-fmt-on-save t js2-basic-offset
                 2 js-indent-level 2 javascript-import-tool
                 'import-js
                 ;; javascript-repl `skewer javascript-repl
                 `nodejs node-add-modules-path t js2-include-node-externs
                 t js2-strict-missing-semi-warning nil js2-missing-semi-one-line-override
                 t)
     shell-scripts
     ;; Other
     eww
     emoji
     git
     github
     version-control
     spacemacs-purpose
     (helm :variables helm-no-header
           t helm-use-fuzzy 'source-directory spacemacs-helm-rg-max-column-number
           1024)
     ranger
     web-beautify
     treemacs
     (gtags :disabled-for clojure
            emacs-lisp javascript latex python shell-scripts)
     epub
     search-engine
     semantic
     ;; cscope
     dash
     (shell :variables shell-default-shell'eshell
            ;; shell-default-shell 'vterm shell-default-height
            30 shell-default-position 'current-buffer
            shell-apply-ansi-color t)
     debug)
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages
   '(sdcv
     ;; doom-themes
     easy-hugo
     ;; emms
     org-alert
     org-cliplink
     org-download
     org-reverse-datetree
     helm-org-rifle
    )
   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages
   '()
   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages
   '(importmagic flycheck-bashate org-brain
                 ;;fci-mode
                 ;; flycheck-ocaml
                 ;; flycheck-bashate
                 )
   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   ;; dotspacemacs-install-packages 'used-but-keep-unused
   dotspacemacs-install-packages
   'used-but-keep-unused))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil) dotspacemacs-enable-emacs-pdumper nil
   ;; File path pointing to emacs 27.1 executable compiled with support
   ;; for the portable dumper (this is currently the branch pdumper).
   ;; (default "emacs-27.0.50")
   dotspacemacs-emacs-pdumper-executable-file
   "emacs-27.0.50"
   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=~/.emacs.d/.cache/dumps/spacemacs.pdmp
   ;; (default spacemacs.pdmp)
   dotspacemacs-emacs-dumper-dump-file
   "spacemacs.pdmp"
   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https
   t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout
   5
   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons
   '(100000000 0.1)
   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa
   nil
   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default nil)
   dotspacemacs-verify-spacelpa-archives
   nil
   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update
   nil
   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory
   'emacs-version
   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style
   'vim
   ;; If non-nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading
   nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner
   nil
   ;; dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists
   '((recents . 5)
     (projects . 7))
   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive
   t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode
   'text-mode
   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message
   nil
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes
   '(
     ;; doom-solarized-light
     ;; doom-molokai
     spacemacs-dark spacemacs-light)
   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   ;; dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)
   dotspacemacs-mode-line-theme
   '(spacemacs :separator wave
               :separator-scale 1.0)
   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state
   t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font
   '("文泉驿微米黑" :size 20
     :weight normal
     :width normal
     :powerline-scale 0.8)
   ;; dotspacemacs-default-font '("Source Code Pro"
   ;;                             :size 20
   ;;                             :weight normal
   ;;                             :width normal
   ;;                             :powerline-scale 1.1)
   
   ;; The leader key (default "SPC")
   dotspacemacs-leader-key
   "SPC"
   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key
   "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key
   ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key
   "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key
   ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key
   "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab
   nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name
   "Default"
   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout
   nil
   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts
   nil
   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names
   nil
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size
   1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location
   'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots
   5
   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state
   nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay
   0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position
   'bottom
   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose
   nil
   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar
   t
   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup
   nil
   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native
   nil
   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup
   t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency
   90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency
   90
   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title
   t
   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide
   t
   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols
   t
   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling
   t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers
   nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method
   'evil
   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode
   nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis
   nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters
   'all
   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server
   t
   ;; dotspacemacs-enable-server nil

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir
   "~/.emacs/server"
   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   ;; dotspacemacs-persistent-server nil
   dotspacemacs-persistent-server
   t
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools
   '("rg" "ag" "pt" "ack" "grep")
   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format
   "%I@%S"
   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format
   nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup
   nil
   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle
   nil
   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs
   nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; 鹅厂
  (setq configuration-layer-elpa-archives '(("melpa-cn" . "http://mirrors.cloud.tencent.com/elpa/melpa/")
                                            ("org-cn" . "http://mirrors.cloud.tencent.com/elpa/org/")
                                            ("gnu-cn" . "http://mirrors.cloud.tencent.com/elpa/gnu/"))))

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump.")

(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."
  (add-to-list 'load-path "~/config/emacs/script")
  (require 'conf-general)
  (global-undo-tree-mode)
  (evil-set-undo-system 'undo-tree))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector [default default default italic underline
                             success warning error])
 '(ansi-color-names-vector ["black" "red3" "ForestGreen" "yellow3" "blue"
                            "magenta3" "DeepSkyBlue" "gray50"])
 '(custom-safe-themes '("bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476"
                        default))
 '(evil-want-Y-yank-to-eol nil)
 '(fci-rule-color "#555556")
 '(hl-todo-keyword-faces '(("TODO" . "#dc752f")
                           ("NEXT" . "#dc752f")
                           ("THEM" . "#2d9574")
                           ("PROG" . "#3a81c3")
                           ("进行中" . "#3a81c3")
                           ("DONT" . "#f2241f")
                           ("FAIL" . "#f2241f")
                           ("DONE" . "#42ae2c")
                           ("NOTE" . "#b1951d")
                           ("KLUDGE" . "#b1951d")
                           ("HACK" . "#b1951d")
                           ("TEMP" . "#b1951d")
                           ("FIXME" . "#dc752f")
                           ("XXX" . "#dc752f")
                           ("XXXX" . "#dc752f")))
 '(org-agenda-files '(""))
 '(package-selected-packages '(godoctor go-tag go-rename go-impl go-guru
                                        go-gen-test go-fill-struct go-eldoc flycheck-golangci-lint
                                        company-go go-mode powershell counsel-gtags
                                        counsel ivy company memory-usage php-runtime
                                        ac-php-core swiper god-mode helm org-web-tools
                                        flycheck-ocaml realgud test-simple loc-changes
                                        load-relative netease-music quelpa chinese-word-at-point
                                        magit utop tuareg caml ocp-indent ob-elixir
                                        merlin flycheck-mix flycheck-credo dune auto-complete-rst
                                        alchemist elixir-mode emms proxy-mode rjsx-mode
                                        nodejs-repl autopair org-ref key-chord helm-bibtex
                                        parsebib biblio biblio-core company-auctex
                                        auctex helm-lsp flycheck-package package-lint
                                        evil-textobj-line blacken hackernews mvn meghanada
                                        maven-test-mode lsp-java groovy-mode groovy-imports
                                        gradle-mode ensime zeal-at-point youdao-dictionary
                                        yasnippet-snippets yapfify yaml-mode xterm-color
                                        x86-lookup ws-butler writeroom-mode winum
                                        which-key web-mode web-beautify volatile-highlights
                                        vmd-mode vi-tilde-fringe uuidgen use-package
                                        toc-org tagedit symon string-inflection stickyfunc-enhance
                                        srefactor sqlup-mode sql-indent spaceline-all-the-icons
                                        smeargle slim-mode shell-pop sdcv scss-mode
                                        scala-mode sbt-mode sass-mode restart-emacs
                                        rainbow-delimiters pyvenv pytest pyim pyenv-mode
                                        py-isort pug-mode prettier-js popwin pippel
                                        pipenv pip-requirements phpunit phpcbf php-extras
                                        php-auto-yasnippets persp-mode pdf-tools pcre2el
                                        password-generator paradox pangu-spacing ox-gfm
                                        overseer orgit org-projectile org-present
                                        org-pomodoro org-mime org-download org-bullets
                                        org-brain open-junk-file nov neotree nasm-mode
                                        nameless multi-term move-text mmm-mode markdown-toc
                                        magithub magit-svn magit-gitflow macrostep
                                        lsp-ui lorem-ipsum livid-mode live-py-mode
                                        link-hint json-navigator json-mode js2-refactor
                                        js-doc indent-guide importmagic impatient-mode
                                        hungry-delete hl-todo highlight-parentheses
                                        highlight-numbers highlight-indentation helm-xref
                                        helm-themes helm-swoop helm-rtags helm-pydoc
                                        helm-purpose helm-projectile helm-org-rifle
                                        helm-mode-manager helm-make helm-gtags helm-gitignore
                                        helm-git-grep helm-flx helm-descbinds helm-dash
                                        helm-ctest helm-css-scss helm-company helm-c-yasnippet
                                        helm-ag google-translate google-c-style golden-ratio
                                        gnuplot gmail-message-mode gitignore-templates
                                        github-search github-clone gitconfig-mode
                                        gitattributes-mode git-timemachine git-messenger
                                        git-link git-gutter-fringe git-gutter-fringe+
                                        gist gh-md ggtags fuzzy forge font-lock+ flymd
                                        flycheck-rtags flycheck-pos-tip flx-ido find-by-pinyin-dired
                                        fill-column-indicator fcitx fancy-battery
                                        eyebrowse expand-region evil-visualstar evil-visual-mark-mode
                                        evil-unimpaired evil-tutor evil-surround evil-org
                                        evil-numbers evil-nerd-commenter evil-mc evil-matchit
                                        evil-magit evil-lisp-state evil-lion evil-indent-plus
                                        evil-iedit-state evil-goggles evil-exchange
                                        evil-escape evil-ediff evil-cleverparens evil-args
                                        evil-anzu eval-sexp-fu eshell-z eshell-prompt-extras
                                        esh-help engine-mode emojify emoji-cheat-sheet-plus
                                        emmet-mode elisp-slime-nav editorconfig edit-server
                                        dumb-jump drupal-mode dotenv-mode doom-modeline
                                        disaster diminish diff-hl define-word dap-mode
                                        cython-mode cquery counsel-projectile company-web
                                        company-tern company-statistics company-rtags
                                        company-php company-lsp company-emoji company-emacs-eclim
                                        company-c-headers company-anaconda column-enforce-mode
                                        cmake-mode cmake-ide clean-aindent-mode clang-format
                                        chinese-conv centered-cursor-mode ccls browse-at-remote
                                        auto-yasnippet auto-highlight-symbol auto-compile
                                        aggressive-indent ace-window ace-pinyin ace-link
                                        ace-jump-helm-line ac-ispell))
 '(pdf-view-midnight-colors '("#655370" . "#fbf8ef"))
 '(pyim-dicts '((:name "basic" :file "/home/wuming/soft/搜狗词库/pyim-bigdict.pyim")
                (:name "soft" :file "/home/wuming/soft/搜狗词库/kaifa.pyim")))
 '(size-indication-mode t)
 '(vc-annotate-background "#1c1e1f")
 '(vc-annotate-color-map (list (cons 20 "#b6e63e")
                               (cons 40 "#c4db4e")
                               (cons 60 "#d3d15f")
                               (cons 80 "#e2c770")
                               (cons 100 "#ebb755")
                               (cons 120 "#f3a73a")
                               (cons 140 "#fd971f")
                               (cons 160 "#fc723b")
                               (cons 180 "#fb4d57")
                               (cons 200 "#fb2874")
                               (cons 220 "#f43461")
                               (cons 240 "#ed404e")
                               (cons 260 "#e74c3c")
                               (cons 280 "#c14d41")
                               (cons 300 "#9c4f48")
                               (cons 320 "#77504e")
                               (cons 340 "#555556")
                               (cons 360 "#555556")))
 '(vc-annotate-very-old-color nil))
